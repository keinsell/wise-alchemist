// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExternalNetwork {
  DISCORD
  TELEGRAM
  WHATSAPP
}

model Account {
  id                 String            @id @default(uuid())
  model              String            @default("text-davinci-002")
  profileConnections ExternalAccount[]
  Conversation       Conversation[]
}

model ExternalAccount {
  id              String          @id @default(uuid())
  accountId       String          @unique
  network         ExternalNetwork
  networkUsername String?
  networkAvatar   String?
  User            Account         @relation(fields: [accountId], references: [id])
}

model Conversation {
  id                   String               @id @default(uuid())
  timestamp            DateTime             @default(now())
  accountId            String
  account              Account              @relation(fields: [accountId], references: [id])
  externalId           String
  externalConversation ExternalConversation @relation(fields: [externalId], references: [id])
  Message              Thread[]
}

model ExternalConversation {
  id           String          @id @default(uuid())
  network      ExternalNetwork
  chatId       String
  Conversation Conversation[]
}

model Thread {
  id             String       @id @default(uuid())
  timestamp      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  meessage       Message[]
}

model Prompt {
  id          Int       @id @default(autoincrement())
  content     String
  tokensCount Int
  Message     Message[]
}

model Generation {
  id              Int       @id @default(autoincrement())
  generationId    String
  parentMessageId String
  content         String
  tokensCount     Int
  messages        Message[]
}

model Message {
  id                String          @id @default(uuid())
  externalMessageId String
  externalMessage   ExternalMessage @relation(fields: [externalMessageId], references: [id])
  Thread            Thread?         @relation(fields: [threadId], references: [id])
  threadId          String?
  Generation        Generation?     @relation(fields: [generationId], references: [id])
  generationId      Int?
  promptId          Int?
  Prompt            Prompt?         @relation(fields: [promptId], references: [id])
}

model ExternalMessage {
  id        String          @id @default(uuid())
  network   ExternalNetwork
  chatId    String
  authorId  String
  messageId String
  content   String
  seen      Boolean?        @default(false)
  Message   Message[]
}
